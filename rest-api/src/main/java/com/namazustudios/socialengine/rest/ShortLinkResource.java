package com.namazustudios.socialengine.rest;

import com.namazustudios.socialengine.exception.InvalidParameterException;
import com.namazustudios.socialengine.model.Pagination;
import com.namazustudios.socialengine.model.ShortLink;
import com.namazustudios.socialengine.service.ShortLinkService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

import javax.inject.Inject;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.net.URI;
import java.net.URISyntaxException;

import static com.google.common.base.Strings.nullToEmpty;

/**
 * Created by patricktwohig on 6/10/15.
 */
@Path("short_link")
@Api(value = "Short Links",
     description = "Short Links are links which are generated and managed internally by the server.  " +
                   "Specific actions can be tied to short links as well as tracking.  This provides a simple " +
                   "API to mange short links generated by the system.")
public class ShortLinkResource {

    @Inject
    private ShortLinkService shortLinkService;

    @GET
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "Search Short Links",
                  notes = "Gets a listing of all ShortLinks with the given search filter.")
    public Pagination<ShortLink> getShortLinks(
            @QueryParam("offset") @DefaultValue("0") final int offset,
            @QueryParam("count")  @DefaultValue("20") final int count,
            @QueryParam("search") final String search) {

        if (offset < 0) {
            throw new InvalidParameterException("Offset must have positive value.");
        }

        if (count < 0) {
            throw new InvalidParameterException("Count must have positive value.");
        }

        final String query = nullToEmpty(search).trim();

        return query.isEmpty() ?
            getShortLinkService().getShortLinks(offset, count) :
            getShortLinkService().getShortLinks(offset, count, query);

    }

    @GET
    @Path("{id}")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "Get A ShortLink",
                  notes = "Gets the metadata for a specific short link with the given ID.")
    public ShortLink getShortLink(@PathParam("id") @DefaultValue("") final String id) {
        return getShortLinkService().getShortLink(id);
    }

    @POST
    @Produces(MediaType.APPLICATION_JSON)
    @Consumes(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "Creates a ShortLink",
                  notes = "Creates a new ShortLink in the system, and returns the information needed to " +
                          "refer to the link later.")
    public ShortLink create(final ShortLink shortLink) {
        return shortLinkService.create(shortLink);
    }

    @DELETE
    @Path("{id}")
    @ApiOperation(value = "Deletes a short link.",
                  notes = "Deletes a short link known to the server.  Once delete, a short link will " +
                          "no longer resolve to its address an will be gone from the server permanently.")
    public void delete(@PathParam("id") final String id) {
        shortLinkService.deleteShortLink(id);
    }

    @GET
    @Path("redirection/{path}")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "Processes a ShortLink",
                  notes = "Process a ShortLink by generating the proper HTTP response by following " +
                          "the link.  This shoudln't be used as the actual destination for a ShortLink as it " +
                          "is likely to be longer than the original link.  However, this can be used as the " +
                          "destination for some upstream service as a target.  Examples include Servlet forwards " +
                          "or HTTP request rewrites.")
    public Response getRedirection(@PathParam("path") final String path) {

        final ShortLink shortLink = shortLinkService.getShortLinkWithPath(path);

        try {
            return Response
                .status(Response.Status.MOVED_PERMANENTLY)
                .location(new URI(shortLink.getDestinationURL()))
                .entity(shortLink)
            .build();
        } catch (URISyntaxException e) {
            throw new NotFoundException();
        }

    }

    public ShortLinkService getShortLinkService() {
        return shortLinkService;
    }

    @Inject
    public void setShortLinkService(ShortLinkService shortLinkService) {
        this.shortLinkService = shortLinkService;
    }

}
