package dev.getelements.elements.rt.remote;

import dev.getelements.elements.rt.id.ApplicationId;
import dev.getelements.elements.rt.remote.InstanceConnectionService.InstanceBinding;

import java.util.Collection;
import java.util.Set;
import java.util.concurrent.ExecutorService;

/**
 * Represents the worker, hosing one or more nodes performing work.
 */
public interface Worker {

    /**
     * Opens a {@link Mutator} which can be used to modify the run-state of this {@link Worker}.
     *
     * @return the {@link Mutator}
     */
    Mutator beginMutation();

    /**
     * Opens an {@link Accessor} which can be used to read the run-state of this {@link Worker}.
     *
     * @return the {@link Accessor}
     */
    Accessor accessWorkerState();

    /**
     * Allows client code to read the sstate of the {@link Worker}
     */
    interface Accessor extends AutoCloseable {

        /**
         * Gets all {@link Node} instances running in this {@link Worker}.
         *
         * @return a {@link Set<Node>}
         */
        Set<Node> getNodeSet();

        /**
         * Gets all active {@link InstanceBinding}s.
         *
         * @return the binding set
         */
        Set<InstanceBinding> getBindingSet();

        /**
         * Releases any resources associated with the {@link Mutator}.
         */
        void close();

    }

    /**
     * Allows for the mutation of the {@link Worker}.
     */
    interface Mutator extends Accessor, AutoCloseable {

        /**
         * Adds a new node with the supplied {@link ApplicationId}.
         *
         * @param applicationId the {@link ApplicationId} to add
         * @return this instance
         */
        Mutator addNode(ApplicationId applicationId);

        /**
         * Adds a new node with the supplied application unique name. The {@link ApplicationId} is generated by using
         * {@link ApplicationId#forUniqueName(String)}
         *
         * @param applicationUniqueName the application unique name
         * @return this instance
         */
        default Mutator addNode(final String applicationUniqueName) {
            final var applicationId = ApplicationId.forUniqueName(applicationUniqueName);
            return addNode(applicationId);
        }

        /**
         * Restarts the supplied {@link Node} with the supplied {@link ApplicationId}.
         * @param applicationId the {@link ApplicationId} to restart
         * @return this instance
         */
        Mutator restartNode(ApplicationId applicationId);

        /**
         * Restarts the supplied {@link Node}s with the supplied {@link ApplicationId}s.
         * @param toRestart a {@link Collection<ApplicationId>} to restart in succession
         * @return this instance
         **/
        default Mutator restartNode(final Collection<ApplicationId> toRestart) {
            toRestart.forEach(this::restartNode);
            return this;
        }

        /**
         * Restarts the supplied {@link Node} with the supplied name. The {@link ApplicationId} is generated by using
         * {@link ApplicationId#forUniqueName(String)}.
         *
         * @param applicationUniqueName the application unique name
         * @return this instance
         */
        default Mutator restartNode(final String applicationUniqueName) {
            final var applicationId = ApplicationId.forUniqueName(applicationUniqueName);
            return restartNode(applicationId);
        }

        /**
         * Removes the supplied {@link Node} with the supplied {@link ApplicationId}.
         * @param applicationId the {@link ApplicationId} to restart
         * @return this instance
         */
        Mutator removeNode(ApplicationId applicationId);

        /**
         * Removes the supplied {@link Node}s with the supplied {@link ApplicationId}s.
         * @param toRestart a {@link Collection<ApplicationId>} to restart in succession
         * @return this instance
         **/
        default Mutator removeNode(final Collection<ApplicationId> toRestart) {
            toRestart.forEach(this::removeNode);
            return this;
        }

        /**
         * Removes the supplied {@link Node} with the supplied name. The {@link ApplicationId} is generated by using
         * {@link ApplicationId#forUniqueName(String)}.
         *
         * @param applicationUniqueName the application unique name
         * @return this instance
         */
        default Mutator removeNode(final String applicationUniqueName) {
            final var applicationId = ApplicationId.forUniqueName(applicationUniqueName);
            return removeNode(applicationId);
        }

        /**
         * Commits any changes to the {@link Worker}.
         * @return this instance
         */
        Mutator commit();

    }

}
