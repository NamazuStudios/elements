package com.namazustudios.socialengine.rt.remote;

import com.namazustudios.socialengine.rt.id.ApplicationId;
import com.namazustudios.socialengine.rt.id.NodeId;

import java.util.Collection;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;

import static com.namazustudios.socialengine.rt.remote.NodeState.HEALTHY;
import static com.namazustudios.socialengine.rt.remote.NodeState.UNHEALTHY;
import static java.util.stream.Collectors.toSet;

/**
 * Represents the worker, hosing one or more nodes performing work.
 */
public interface Worker {

    /**
     * Used with {@link javax.inject.Named} to name an instance of {@link ExecutorService} which is a general purpose
     * pool of threads used for performing various tasks within the system.
     */
    String EXECUTOR_SERVICE = "com.namazustudios.socialengine.rt.worker.executor";

    /**
     * Used with {@link javax.inject.Named} to name an instance of {@link java.util.concurrent.ScheduledExecutorService}
     * which is a general purpose pool of threads used for performing various tasks within the system that require
     * scheduling.
     */
    String SCHEDULED_EXECUTOR_SERVICE = "com.namazustudios.socialengine.rt.scheduled.executor";

    /**
     * Opens a {@link Mutator} which can be used to modify the run-state of this {@link Worker}.
     *
     * @return the {@link Mutator}
     */
    Mutator beginMutation();

    /**
     * Opens an {@link Accessor} which can be used to read the run-state of this {@link Worker}.
     *
     * @return the {@link Accessor}
     */
    Accessor accessWorkerState();

    /**
     * Allows client code to read the sstate of the {@link Worker}
     */
    interface Accessor extends AutoCloseable {

        /**
         * Gets all {@link Node} instances running in this {@link Worker}.
         *
         * @return a {@link Set<Node>}
         */
        Set<Node> getNodeSet();

        /**
         * Releases any resources associated with the {@link Mutator}.
         */
        void close();

    }

    /**
     * Allows for the mutation of the {@link Worker}.
     */
    interface Mutator extends Accessor, AutoCloseable {

        /**
         * Adds a new node with the supplied {@link ApplicationId}.
         *
         * @param applicationId the {@link ApplicationId} to add
         * @return this instance
         */
        Mutator addNode(ApplicationId applicationId);

        /**
         * Adds a new node with the supplied application unique name. The {@link ApplicationId} is generated by using
         * {@link ApplicationId#forUniqueName(String)}
         *
         * @param applicationUniqueName the application unique name
         * @return this instance
         */
        default Mutator addNode(final String applicationUniqueName) {
            final var applicationId = ApplicationId.forUniqueName(applicationUniqueName);
            return addNode(applicationId);
        }

        /**
         * Restarts the supplied {@link Node}s with the supplied {@link NodeId}.
         * @param toRestart the {@link NodeId} to restart
         * @return this instance
         */
        Mutator restart(final NodeId toRestart);

        /**
         * Restarts the supplied {@link Node}s with the supplied {@link NodeId}.
         * @param toRestart a {@link Collection<NodeId>} to restart in succession
         * @return this instance
         **/
        default Mutator restart(final Collection<NodeId> toRestart) {
            toRestart.forEach(this::restart);
            return this;
        }

        /**
         * Commits any changes to the {@link Worker}.
         * @return this instance
         */
        Mutator commit();

    }

}
