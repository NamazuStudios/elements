package com.namazustudios.socialengine.rt.remote;

import com.namazustudios.socialengine.rt.id.ApplicationId;
import com.namazustudios.socialengine.rt.id.NodeId;

import java.util.Set;
import java.util.concurrent.ExecutorService;

/**
 * Represents the worker, hosing one or more nodes performing work.
 */
public interface Worker {

    /**
     * Used with {@link javax.inject.Named} to name an instance of {@link ExecutorService} which is a general purpose
     * pool of threads used for performing various tasks within the system.
     */
    String EXECUTOR_SERVICE = "com.namazustudios.socialengine.rt.worker.executor";

    /**
     * Used with {@link javax.inject.Named} to name an instance of {@link java.util.concurrent.ScheduledExecutorService}
     * which is a general purpose pool of threads used for performing various tasks within the system that require
     * scheduling.
     */
    String SCHEDULED_EXECUTOR_SERVICE = "com.namazustudios.socialengine.rt.scheduled.executor";

    /**
     * Gets a set of all active nodes.  This may change as new nodes may be introduced as well as removed.  The returned
     * {@link Set<NodeId>} shall be an instantaneous snapshot.  The returned set may be empty if no nodes are active.
     *
     * @return a {@link Set<NodeId>}
     */
    Set<NodeId> getActiveNodeIds();

    /**
     * Opens a {@link Mutator} which can be used to modify the run-state of this {@link Worker}.
     *
     * @return the {@link Mutator}
     */
    Mutator beginMutation();

    /**
     * Allows for the mutation of the {@link Worker}.
     */
    interface Mutator extends AutoCloseable {

        /**
         * Adds a new node with the supplied {@link ApplicationId}.
         *
         * @param applicationId the {@link ApplicationId} to add
         * @return this instance
         */
        Mutator addNode(ApplicationId applicationId);

        /**
         * Adds a new node with the supplied application unique name. The {@link ApplicationId} is generated by using
         * {@link ApplicationId#forUniqueName(String)}
         *
         * @param applicationUniqueName the application unique name
         * @return this instance
         */
        default Mutator addNode(final String applicationUniqueName) {
            final var applicationId = ApplicationId.forUniqueName(applicationUniqueName);
            return addNode(applicationId);
        }

        /**
         * Commits any changes to the {@link Worker}.
         * @return this instance
         */
        Mutator commit();

        /**
         * Releases any resources associated with the {@link Mutator}.
         */
        void close();

    }

}
