-- This is the namazu_internal lua package.  This is a set of functionality written in Lua entirely around
-- the Java API.  This is designed to provide some functionality and reduce the boilerplate for authors
-- of lua resource scripts.  This is separate from the namazu_rt library which is the the core API for the RT server.
--
-- This deals strictly with manging worker resources and does so only through the Java API.  This is designed
-- to provide a simplified wrapper aroundt the Java API.  This requires no special additions or modifications
-- to the Java API and everythign here could be accomplished without it.
--
-- Created by IntelliJ IDEA.
-- User: patricktwohig
-- Date: 10/28/15
-- Time: 12:02 AM
-- To change this template use File | Settings | File Templates.
--

require "table"
namazu_util = require "namazu_util"

-- Sets up the table to house the logic
local namazu_internal = {
    providers = {}
}

-- Behaves similar to require, only this returns a Provider instance which is used to build
-- the instance of the resource.  Lke require, it is not necessary to specify the .lua extension
-- as it will be appended automatically.  It is possible to add a custom postfix if desired.
function namazu_internal.require(name)

    namazu_rt.resource:getScriptLog():debug("Requiring worker resource {}", name, postfix)

    if (extension == nil) then
        name = name .. ".lua"
    else
        name = name .. postfix
    end

    return namazu_internal.resource_provider_named(name)

end

-- Returns an instance of Provider<?> for an worker script with the given name.  This caches the
-- result for maximum performance as instances of Provider may be generated by the IoC container
-- and would take a long time to build.
function namazu_internal.resource_provider_named(name)

    namazu_rt.resource:getScriptLog():debug("Searching for worker resource provider for {}", name)
    provider = namazu_internal.providers[name]

    if (provider == nil) then
        namazu_rt.resource:getScriptLog():debug("Provided not cached for {}.  Deferring to IoC.", name)
        namazu_rt.ioc:provider("com.namazustudios.socialengine.rt.worker.InternalResource", name)
    end

    return provider;

end

-- Given a Provider<?> and optional initializer function, this will instantiate the object and then
-- pass the instantantiated object through the given function (if it is specified).  This can be
-- used as a ResourceInitializer to be passed to the internalServer
function namazu_internal.initializer_for_provider(provider, initializer)
    return {
        init = function()

            resource = provider:get();

            if initializer ~= nil then
                initializer(resource)
            end

            return resource

        end
    }
end

return namazu_internal
