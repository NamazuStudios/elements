--
-- Created by IntelliJ IDEA.
-- User: patricktwohig
-- Date: 10/28/15
-- Time: 12:02 AM
-- To change this template use File | Settings | File Templates.
--

require "table"

-- This is the namazu_rt_ext lua package.  This is a set of functionality written in Lua entirely around
-- the Java API.  This is designed to provide some functionality and reduce the boilerplate for authors
-- of lua resource scripts.  This is separate from the namazu_rt library which is the the core API for the RT server.

-- Code in this file should depend only on the core API or the underlying Lua functionality.

-- Some needed types are required
local Path = java.require("com.namazustudios.socialengine.rt.Path")

-- Sets up the table to house the logic
local namazu_rt_ext = {}
namazu_rt_ext["session"] = {}
namazu_rt_ext["internal"] = {}
namazu_rt_ext["internal"]["providers"] = {}

-- Returns a Path object.  This can accept a single string, which will be parsed out accordingly.  Alternatively,
-- this accepts variadic arguments which will specify the individual components of the Path.  See the constructor
-- for Path for more information.
function namazu_rt_ext.path(...)
    if (table.getn(arg) == 1) then
        return Path:new(table[1])
    else
        return Path:new(arg)
    end
end

-- Returns an instance of Provider<?> for an internal script with the given name.  This caches the
-- result for maximum performance as instances of Provider may be generated by the IoC container
-- and would take a long time to build.
function namazu_rt_ext.internal.resource_provider_named(name)

    provider = namazu_rt_ext.internal.providers[name]

    if (provider == nil) then
        namazu_rt.ioc:provider("com.namazustudios.socialengine.rt.lua.LuaInternalResource", name)
    end

    return provider;

end

-- Given a Provider<?> and optional initializer function, this will instantiate the object and then
-- pass the instantantiated object through the given function (if it is specified).  This can be
-- used as a ResourceInitializer to be passed to the internalServer
function namazu_rt_ext.internal.initializer_for_provider(provider, initializer)
    return {
        init = function()

            resource = provider:get();

            if initializer ~= nil then
                initializer(resource)
            end

            return resource
        end
    }
end

-- Initizlizes the given Reosurce with the name, at the designated path, only if it is needed.  If
-- the resource already exists, this returns the existing resource and the initialization never
-- takes place.
function namazu_rt_ext.internal.initialize_if_needed(name, path, params)

    provider = namzu_rt_ext.internal.provider(name)

    initializer = namazu_rt_ext.internal.initializer_for_provider(provider, function(resource)
        resource:init(params)
    end)

    return internalServer:retainOrAddResourceIfAbsent(path, initializer)

end

-- Initizlizes the given Reosurce with the name, at the designated path, only if it is needed.  If
-- the resource already exists, this returns the existing resource and the initialization never
-- takes place.  Additionally, this retains the resource to the session such that it will be
-- released when the client disconnects
function namazu_rt_ext.internal.initialize_to_session_if_needed(session, name, path, params)

    provider = namzu_rt_ext.internal.provider(name)

    initializer = namazu_rt_ext.internal.initializer_for_provider(provider, function(resource)
        resource:init(params)
    end)

    return session:retainOrAddResourceIfAbsent():atPath(path);

end

return namazu_rt_ext
