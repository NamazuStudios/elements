package dev.getelements.elements.rt.transact.unix;

import com.google.inject.AbstractModule;
import dev.getelements.elements.rt.ResourceLoader;
import dev.getelements.elements.rt.id.NodeId;
import dev.getelements.elements.rt.transact.JournalTransactionalResourceServicePersistenceModule;
import dev.getelements.elements.rt.transact.JournalTransactionalPersistenceDriver;
import dev.getelements.elements.rt.transact.TransactionalResourceServiceModule;
import org.testng.annotations.Guice;
import org.testng.annotations.Test;

import javax.inject.Inject;
import java.io.InputStream;
import java.nio.channels.ReadableByteChannel;

import static dev.getelements.elements.rt.id.NodeId.randomNodeId;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.mock;
import static org.testng.Assert.fail;

@Guice(modules=UnixFSCloseOpenTest.Module.class)
public class UnixFSCloseOpenTest {

    @Inject
    private JournalTransactionalPersistenceDriver journalTransactionalPersistenceDriver;

    @Test
    public void testOpenTwice() {
        for (int i = 0; i < 10; ++i) {
            journalTransactionalPersistenceDriver.start();
            journalTransactionalPersistenceDriver.stop();
        }
    }

    public static class Module extends AbstractModule {

        @Override
        protected void configure() {

            final NodeId testNodeId = randomNodeId();

            bind(NodeId.class).toInstance(testNodeId);

            install(new TransactionalResourceServiceModule().exposeTransactionalResourceService());
            install(new JournalTransactionalResourceServicePersistenceModule());

            install(new UnixFSTransactionalPersistenceContextModule()
                .exposeDetailsForTesting()
                .withTestingDefaults("open-close")
            );

            final ResourceLoader resourceLoader = mock(ResourceLoader.class);

            doAnswer(a -> {
                fail("No attempt to load resource should be made for this test.");
                return null;
            }).when(resourceLoader).load(any(InputStream.class));

            doAnswer(a -> {
                fail("No attempt to load resource should be made for this test.");
                return null;
            }).when(resourceLoader).load(any(ReadableByteChannel.class));

            bind(ResourceLoader.class).toInstance(resourceLoader);

        }

    }

}
